// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package port

import (
	"errors"

	"fmt"

	"reflect"

	"sync"

	"time"
)

type ArrayOutputPortByte struct {
	OutputPort
	Mutex sync.RWMutex
	Value []byte
}

type ArrayInputPortByte struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []byte
	PrevValue []byte
}

func NewArrayOutputPortByte() *ArrayOutputPortByte {
	array := make([]byte, 10)
	return &ArrayOutputPortByte{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortByteLen(len int) *ArrayOutputPortByte {
	array := make([]byte, len)
	return &ArrayOutputPortByte{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortByte(requiredNew bool) *ArrayInputPortByte {
	array := make([]byte, 10)
	prevArray := make([]byte, 10)
	return &ArrayInputPortByte{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortByteLen(requiredNew bool, len int) *ArrayInputPortByte {
	array := make([]byte, len)
	prevArray := make([]byte, len)
	return &ArrayInputPortByte{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortByte) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortByte) Write(value []byte) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]byte, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortByte) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortByte) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortByte) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortByte) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]byte)
	return nil
}

func (port *ArrayInputPortByte) Read() []byte {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortInt struct {
	OutputPort
	Mutex sync.RWMutex
	Value []int
}

type ArrayInputPortInt struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []int
	PrevValue []int
}

func NewArrayOutputPortInt() *ArrayOutputPortInt {
	array := make([]int, 10)
	return &ArrayOutputPortInt{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortIntLen(len int) *ArrayOutputPortInt {
	array := make([]int, len)
	return &ArrayOutputPortInt{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortInt(requiredNew bool) *ArrayInputPortInt {
	array := make([]int, 10)
	prevArray := make([]int, 10)
	return &ArrayInputPortInt{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortIntLen(requiredNew bool, len int) *ArrayInputPortInt {
	array := make([]int, len)
	prevArray := make([]int, len)
	return &ArrayInputPortInt{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortInt) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortInt) Write(value []int) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]int, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortInt) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortInt) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortInt) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortInt) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]int)
	return nil
}

func (port *ArrayInputPortInt) Read() []int {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortInt8 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []int8
}

type ArrayInputPortInt8 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []int8
	PrevValue []int8
}

func NewArrayOutputPortInt8() *ArrayOutputPortInt8 {
	array := make([]int8, 10)
	return &ArrayOutputPortInt8{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortInt8Len(len int) *ArrayOutputPortInt8 {
	array := make([]int8, len)
	return &ArrayOutputPortInt8{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortInt8(requiredNew bool) *ArrayInputPortInt8 {
	array := make([]int8, 10)
	prevArray := make([]int8, 10)
	return &ArrayInputPortInt8{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortInt8Len(requiredNew bool, len int) *ArrayInputPortInt8 {
	array := make([]int8, len)
	prevArray := make([]int8, len)
	return &ArrayInputPortInt8{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortInt8) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortInt8) Write(value []int8) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]int8, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortInt8) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortInt8) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortInt8) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortInt8) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]int8)
	return nil
}

func (port *ArrayInputPortInt8) Read() []int8 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortInt16 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []int16
}

type ArrayInputPortInt16 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []int16
	PrevValue []int16
}

func NewArrayOutputPortInt16() *ArrayOutputPortInt16 {
	array := make([]int16, 10)
	return &ArrayOutputPortInt16{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortInt16Len(len int) *ArrayOutputPortInt16 {
	array := make([]int16, len)
	return &ArrayOutputPortInt16{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortInt16(requiredNew bool) *ArrayInputPortInt16 {
	array := make([]int16, 10)
	prevArray := make([]int16, 10)
	return &ArrayInputPortInt16{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortInt16Len(requiredNew bool, len int) *ArrayInputPortInt16 {
	array := make([]int16, len)
	prevArray := make([]int16, len)
	return &ArrayInputPortInt16{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortInt16) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortInt16) Write(value []int16) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]int16, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortInt16) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortInt16) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortInt16) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortInt16) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]int16)
	return nil
}

func (port *ArrayInputPortInt16) Read() []int16 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortInt32 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []int32
}

type ArrayInputPortInt32 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []int32
	PrevValue []int32
}

func NewArrayOutputPortInt32() *ArrayOutputPortInt32 {
	array := make([]int32, 10)
	return &ArrayOutputPortInt32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortInt32Len(len int) *ArrayOutputPortInt32 {
	array := make([]int32, len)
	return &ArrayOutputPortInt32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortInt32(requiredNew bool) *ArrayInputPortInt32 {
	array := make([]int32, 10)
	prevArray := make([]int32, 10)
	return &ArrayInputPortInt32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortInt32Len(requiredNew bool, len int) *ArrayInputPortInt32 {
	array := make([]int32, len)
	prevArray := make([]int32, len)
	return &ArrayInputPortInt32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortInt32) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortInt32) Write(value []int32) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]int32, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortInt32) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortInt32) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortInt32) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortInt32) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]int32)
	return nil
}

func (port *ArrayInputPortInt32) Read() []int32 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortInt64 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []int64
}

type ArrayInputPortInt64 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []int64
	PrevValue []int64
}

func NewArrayOutputPortInt64() *ArrayOutputPortInt64 {
	array := make([]int64, 10)
	return &ArrayOutputPortInt64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortInt64Len(len int) *ArrayOutputPortInt64 {
	array := make([]int64, len)
	return &ArrayOutputPortInt64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortInt64(requiredNew bool) *ArrayInputPortInt64 {
	array := make([]int64, 10)
	prevArray := make([]int64, 10)
	return &ArrayInputPortInt64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortInt64Len(requiredNew bool, len int) *ArrayInputPortInt64 {
	array := make([]int64, len)
	prevArray := make([]int64, len)
	return &ArrayInputPortInt64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortInt64) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortInt64) Write(value []int64) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]int64, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortInt64) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortInt64) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortInt64) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortInt64) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]int64)
	return nil
}

func (port *ArrayInputPortInt64) Read() []int64 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortUint struct {
	OutputPort
	Mutex sync.RWMutex
	Value []uint
}

type ArrayInputPortUint struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []uint
	PrevValue []uint
}

func NewArrayOutputPortUint() *ArrayOutputPortUint {
	array := make([]uint, 10)
	return &ArrayOutputPortUint{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortUintLen(len int) *ArrayOutputPortUint {
	array := make([]uint, len)
	return &ArrayOutputPortUint{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortUint(requiredNew bool) *ArrayInputPortUint {
	array := make([]uint, 10)
	prevArray := make([]uint, 10)
	return &ArrayInputPortUint{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortUintLen(requiredNew bool, len int) *ArrayInputPortUint {
	array := make([]uint, len)
	prevArray := make([]uint, len)
	return &ArrayInputPortUint{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortUint) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortUint) Write(value []uint) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]uint, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortUint) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortUint) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortUint) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortUint) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]uint)
	return nil
}

func (port *ArrayInputPortUint) Read() []uint {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortUint8 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []uint8
}

type ArrayInputPortUint8 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []uint8
	PrevValue []uint8
}

func NewArrayOutputPortUint8() *ArrayOutputPortUint8 {
	array := make([]uint8, 10)
	return &ArrayOutputPortUint8{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortUint8Len(len int) *ArrayOutputPortUint8 {
	array := make([]uint8, len)
	return &ArrayOutputPortUint8{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortUint8(requiredNew bool) *ArrayInputPortUint8 {
	array := make([]uint8, 10)
	prevArray := make([]uint8, 10)
	return &ArrayInputPortUint8{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortUint8Len(requiredNew bool, len int) *ArrayInputPortUint8 {
	array := make([]uint8, len)
	prevArray := make([]uint8, len)
	return &ArrayInputPortUint8{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortUint8) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortUint8) Write(value []uint8) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]uint8, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortUint8) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortUint8) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortUint8) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortUint8) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]uint8)
	return nil
}

func (port *ArrayInputPortUint8) Read() []uint8 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortUint16 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []uint16
}

type ArrayInputPortUint16 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []uint16
	PrevValue []uint16
}

func NewArrayOutputPortUint16() *ArrayOutputPortUint16 {
	array := make([]uint16, 10)
	return &ArrayOutputPortUint16{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortUint16Len(len int) *ArrayOutputPortUint16 {
	array := make([]uint16, len)
	return &ArrayOutputPortUint16{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortUint16(requiredNew bool) *ArrayInputPortUint16 {
	array := make([]uint16, 10)
	prevArray := make([]uint16, 10)
	return &ArrayInputPortUint16{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortUint16Len(requiredNew bool, len int) *ArrayInputPortUint16 {
	array := make([]uint16, len)
	prevArray := make([]uint16, len)
	return &ArrayInputPortUint16{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortUint16) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortUint16) Write(value []uint16) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]uint16, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortUint16) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortUint16) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortUint16) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortUint16) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]uint16)
	return nil
}

func (port *ArrayInputPortUint16) Read() []uint16 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortUint32 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []uint32
}

type ArrayInputPortUint32 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []uint32
	PrevValue []uint32
}

func NewArrayOutputPortUint32() *ArrayOutputPortUint32 {
	array := make([]uint32, 10)
	return &ArrayOutputPortUint32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortUint32Len(len int) *ArrayOutputPortUint32 {
	array := make([]uint32, len)
	return &ArrayOutputPortUint32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortUint32(requiredNew bool) *ArrayInputPortUint32 {
	array := make([]uint32, 10)
	prevArray := make([]uint32, 10)
	return &ArrayInputPortUint32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortUint32Len(requiredNew bool, len int) *ArrayInputPortUint32 {
	array := make([]uint32, len)
	prevArray := make([]uint32, len)
	return &ArrayInputPortUint32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortUint32) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortUint32) Write(value []uint32) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]uint32, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortUint32) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortUint32) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortUint32) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortUint32) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]uint32)
	return nil
}

func (port *ArrayInputPortUint32) Read() []uint32 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortUint64 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []uint64
}

type ArrayInputPortUint64 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []uint64
	PrevValue []uint64
}

func NewArrayOutputPortUint64() *ArrayOutputPortUint64 {
	array := make([]uint64, 10)
	return &ArrayOutputPortUint64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortUint64Len(len int) *ArrayOutputPortUint64 {
	array := make([]uint64, len)
	return &ArrayOutputPortUint64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortUint64(requiredNew bool) *ArrayInputPortUint64 {
	array := make([]uint64, 10)
	prevArray := make([]uint64, 10)
	return &ArrayInputPortUint64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortUint64Len(requiredNew bool, len int) *ArrayInputPortUint64 {
	array := make([]uint64, len)
	prevArray := make([]uint64, len)
	return &ArrayInputPortUint64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortUint64) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortUint64) Write(value []uint64) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]uint64, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortUint64) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortUint64) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortUint64) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortUint64) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]uint64)
	return nil
}

func (port *ArrayInputPortUint64) Read() []uint64 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortBool struct {
	OutputPort
	Mutex sync.RWMutex
	Value []bool
}

type ArrayInputPortBool struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []bool
	PrevValue []bool
}

func NewArrayOutputPortBool() *ArrayOutputPortBool {
	array := make([]bool, 10)
	return &ArrayOutputPortBool{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortBoolLen(len int) *ArrayOutputPortBool {
	array := make([]bool, len)
	return &ArrayOutputPortBool{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortBool(requiredNew bool) *ArrayInputPortBool {
	array := make([]bool, 10)
	prevArray := make([]bool, 10)
	return &ArrayInputPortBool{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortBoolLen(requiredNew bool, len int) *ArrayInputPortBool {
	array := make([]bool, len)
	prevArray := make([]bool, len)
	return &ArrayInputPortBool{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortBool) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortBool) Write(value []bool) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]bool, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortBool) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortBool) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortBool) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortBool) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]bool)
	return nil
}

func (port *ArrayInputPortBool) Read() []bool {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortFloat32 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []float32
}

type ArrayInputPortFloat32 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []float32
	PrevValue []float32
}

func NewArrayOutputPortFloat32() *ArrayOutputPortFloat32 {
	array := make([]float32, 10)
	return &ArrayOutputPortFloat32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortFloat32Len(len int) *ArrayOutputPortFloat32 {
	array := make([]float32, len)
	return &ArrayOutputPortFloat32{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortFloat32(requiredNew bool) *ArrayInputPortFloat32 {
	array := make([]float32, 10)
	prevArray := make([]float32, 10)
	return &ArrayInputPortFloat32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortFloat32Len(requiredNew bool, len int) *ArrayInputPortFloat32 {
	array := make([]float32, len)
	prevArray := make([]float32, len)
	return &ArrayInputPortFloat32{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortFloat32) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortFloat32) Write(value []float32) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]float32, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortFloat32) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortFloat32) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortFloat32) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortFloat32) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]float32)
	return nil
}

func (port *ArrayInputPortFloat32) Read() []float32 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

type ArrayOutputPortFloat64 struct {
	OutputPort
	Mutex sync.RWMutex
	Value []float64
}

type ArrayInputPortFloat64 struct {
	InputPort
	Mutex     sync.RWMutex
	Value     []float64
	PrevValue []float64
}

func NewArrayOutputPortFloat64() *ArrayOutputPortFloat64 {
	array := make([]float64, 10)
	return &ArrayOutputPortFloat64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayOutputPortFloat64Len(len int) *ArrayOutputPortFloat64 {
	array := make([]float64, len)
	return &ArrayOutputPortFloat64{OutputPort: OutputPort{}, Mutex: sync.RWMutex{}, Value: array}
}

func NewArrayInputPortFloat64(requiredNew bool) *ArrayInputPortFloat64 {
	array := make([]float64, 10)
	prevArray := make([]float64, 10)
	return &ArrayInputPortFloat64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func NewArrayInputPortFloat64Len(requiredNew bool, len int) *ArrayInputPortFloat64 {
	array := make([]float64, len)
	prevArray := make([]float64, len)
	return &ArrayInputPortFloat64{InputPort: InputPort{RequiredNew: requiredNew}, Mutex: sync.RWMutex{}, Value: array, PrevValue: prevArray}
}

func (port *ArrayOutputPortFloat64) GetTimestamp() time.Time {
	return port.Timestamp
}

// Write will write input slice value into the current port
// Input slice will be copied into internal port slice
// If internal port slice len is < input value it will be extended
func (port *ArrayOutputPortFloat64) Write(value []float64) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	if len(port.Value) < len(value) {
		port.Value = append(port.Value, make([]float64, len(value)-len(port.Value))...)
	}

	copy(port.Value, value)
	port.Timestamp = time.Now()
	return nil
}

func (port *ArrayInputPortFloat64) IsRequiredNew() bool {
	return port.RequiredNew
}

func (port *ArrayInputPortFloat64) ValueChanged() bool {
	for i, value := range port.Value {
		if value != port.PrevValue[i] {
			return true
		}
	}
	return false
}

// read will return value currently stored in port
// Needed only for internal usage by graph
func (port *ArrayOutputPortFloat64) read() interface{} {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}

func (port *ArrayInputPortFloat64) write(value interface{}) error {
	port.Mutex.Lock()
	defer port.Mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(port.Value)
	if typeOfValue.Kind() != reflect.Slice {
		return errors.New("unsupported value type, expected slice of values")
	}
	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}

	valueOfValue := reflect.ValueOf(value)
	copy(port.PrevValue, port.Value)
	port.Value = valueOfValue.Convert(typeOfPortValue).Interface().([]float64)
	return nil
}

func (port *ArrayInputPortFloat64) Read() []float64 {
	port.Mutex.RLock()
	defer port.Mutex.RUnlock()

	return port.Value
}
