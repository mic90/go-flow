// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package property

import (
	"fmt"

	"github.com/rs/xid"

	"reflect"

	"sync"
)

type PropertyByte struct {
	Value       byte          `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyByte(description string, defaultValue byte, min, max int, readOnly, userVisible bool, unit string) *PropertyByte {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyByte{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyByteRW(description string, defaultValue byte, min, max int, userVisible bool, unit string) *PropertyByte {
	return NewPropertyByte(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyByteRO(description string, defaultValue byte, min, max int, userVisible bool, unit string) *PropertyByte {
	return NewPropertyByte(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyByteUserView(description string, defaultValue byte, min, max int, unit string) *PropertyByte {
	return NewPropertyByte(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyByteUserViewRaw(description string, defaultValue byte, min, max int) *PropertyByte {
	return NewPropertyByte(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyByte) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(byte)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyByte) WriteByte(value byte) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyByte) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyByte) ReadByte() byte {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyByte) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyInt struct {
	Value       int           `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyInt(description string, defaultValue int, min, max int, readOnly, userVisible bool, unit string) *PropertyInt {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyInt{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyIntRW(description string, defaultValue int, min, max int, userVisible bool, unit string) *PropertyInt {
	return NewPropertyInt(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyIntRO(description string, defaultValue int, min, max int, userVisible bool, unit string) *PropertyInt {
	return NewPropertyInt(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyIntUserView(description string, defaultValue int, min, max int, unit string) *PropertyInt {
	return NewPropertyInt(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyIntUserViewRaw(description string, defaultValue int, min, max int) *PropertyInt {
	return NewPropertyInt(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyInt) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(int)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyInt) WriteInt(value int) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyInt) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt) ReadInt() int {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyInt8 struct {
	Value       int8          `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyInt8(description string, defaultValue int8, min, max int, readOnly, userVisible bool, unit string) *PropertyInt8 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyInt8{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyInt8RW(description string, defaultValue int8, min, max int, userVisible bool, unit string) *PropertyInt8 {
	return NewPropertyInt8(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyInt8RO(description string, defaultValue int8, min, max int, userVisible bool, unit string) *PropertyInt8 {
	return NewPropertyInt8(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyInt8UserView(description string, defaultValue int8, min, max int, unit string) *PropertyInt8 {
	return NewPropertyInt8(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyInt8UserViewRaw(description string, defaultValue int8, min, max int) *PropertyInt8 {
	return NewPropertyInt8(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyInt8) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(int8)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyInt8) WriteInt8(value int8) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyInt8) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt8) ReadInt8() int8 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt8) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyInt16 struct {
	Value       int16         `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyInt16(description string, defaultValue int16, min, max int, readOnly, userVisible bool, unit string) *PropertyInt16 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyInt16{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyInt16RW(description string, defaultValue int16, min, max int, userVisible bool, unit string) *PropertyInt16 {
	return NewPropertyInt16(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyInt16RO(description string, defaultValue int16, min, max int, userVisible bool, unit string) *PropertyInt16 {
	return NewPropertyInt16(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyInt16UserView(description string, defaultValue int16, min, max int, unit string) *PropertyInt16 {
	return NewPropertyInt16(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyInt16UserViewRaw(description string, defaultValue int16, min, max int) *PropertyInt16 {
	return NewPropertyInt16(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyInt16) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(int16)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyInt16) WriteInt16(value int16) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyInt16) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt16) ReadInt16() int16 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt16) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyInt32 struct {
	Value       int32         `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyInt32(description string, defaultValue int32, min, max int, readOnly, userVisible bool, unit string) *PropertyInt32 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyInt32{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyInt32RW(description string, defaultValue int32, min, max int, userVisible bool, unit string) *PropertyInt32 {
	return NewPropertyInt32(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyInt32RO(description string, defaultValue int32, min, max int, userVisible bool, unit string) *PropertyInt32 {
	return NewPropertyInt32(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyInt32UserView(description string, defaultValue int32, min, max int, unit string) *PropertyInt32 {
	return NewPropertyInt32(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyInt32UserViewRaw(description string, defaultValue int32, min, max int) *PropertyInt32 {
	return NewPropertyInt32(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyInt32) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(int32)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyInt32) WriteInt32(value int32) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyInt32) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt32) ReadInt32() int32 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt32) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyInt64 struct {
	Value       int64         `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyInt64(description string, defaultValue int64, min, max int, readOnly, userVisible bool, unit string) *PropertyInt64 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyInt64{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyInt64RW(description string, defaultValue int64, min, max int, userVisible bool, unit string) *PropertyInt64 {
	return NewPropertyInt64(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyInt64RO(description string, defaultValue int64, min, max int, userVisible bool, unit string) *PropertyInt64 {
	return NewPropertyInt64(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyInt64UserView(description string, defaultValue int64, min, max int, unit string) *PropertyInt64 {
	return NewPropertyInt64(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyInt64UserViewRaw(description string, defaultValue int64, min, max int) *PropertyInt64 {
	return NewPropertyInt64(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyInt64) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(int64)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyInt64) WriteInt64(value int64) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyInt64) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt64) ReadInt64() int64 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyInt64) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyUint struct {
	Value       uint          `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyUint(description string, defaultValue uint, min, max int, readOnly, userVisible bool, unit string) *PropertyUint {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyUint{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyUintRW(description string, defaultValue uint, min, max int, userVisible bool, unit string) *PropertyUint {
	return NewPropertyUint(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyUintRO(description string, defaultValue uint, min, max int, userVisible bool, unit string) *PropertyUint {
	return NewPropertyUint(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyUintUserView(description string, defaultValue uint, min, max int, unit string) *PropertyUint {
	return NewPropertyUint(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyUintUserViewRaw(description string, defaultValue uint, min, max int) *PropertyUint {
	return NewPropertyUint(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyUint) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(uint)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyUint) WriteUint(value uint) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyUint) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint) ReadUint() uint {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyUint8 struct {
	Value       uint8         `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyUint8(description string, defaultValue uint8, min, max int, readOnly, userVisible bool, unit string) *PropertyUint8 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyUint8{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyUint8RW(description string, defaultValue uint8, min, max int, userVisible bool, unit string) *PropertyUint8 {
	return NewPropertyUint8(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyUint8RO(description string, defaultValue uint8, min, max int, userVisible bool, unit string) *PropertyUint8 {
	return NewPropertyUint8(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyUint8UserView(description string, defaultValue uint8, min, max int, unit string) *PropertyUint8 {
	return NewPropertyUint8(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyUint8UserViewRaw(description string, defaultValue uint8, min, max int) *PropertyUint8 {
	return NewPropertyUint8(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyUint8) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(uint8)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyUint8) WriteUint8(value uint8) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyUint8) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint8) ReadUint8() uint8 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint8) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyUint16 struct {
	Value       uint16        `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyUint16(description string, defaultValue uint16, min, max int, readOnly, userVisible bool, unit string) *PropertyUint16 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyUint16{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyUint16RW(description string, defaultValue uint16, min, max int, userVisible bool, unit string) *PropertyUint16 {
	return NewPropertyUint16(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyUint16RO(description string, defaultValue uint16, min, max int, userVisible bool, unit string) *PropertyUint16 {
	return NewPropertyUint16(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyUint16UserView(description string, defaultValue uint16, min, max int, unit string) *PropertyUint16 {
	return NewPropertyUint16(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyUint16UserViewRaw(description string, defaultValue uint16, min, max int) *PropertyUint16 {
	return NewPropertyUint16(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyUint16) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(uint16)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyUint16) WriteUint16(value uint16) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyUint16) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint16) ReadUint16() uint16 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint16) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyUint32 struct {
	Value       uint32        `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyUint32(description string, defaultValue uint32, min, max int, readOnly, userVisible bool, unit string) *PropertyUint32 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyUint32{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyUint32RW(description string, defaultValue uint32, min, max int, userVisible bool, unit string) *PropertyUint32 {
	return NewPropertyUint32(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyUint32RO(description string, defaultValue uint32, min, max int, userVisible bool, unit string) *PropertyUint32 {
	return NewPropertyUint32(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyUint32UserView(description string, defaultValue uint32, min, max int, unit string) *PropertyUint32 {
	return NewPropertyUint32(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyUint32UserViewRaw(description string, defaultValue uint32, min, max int) *PropertyUint32 {
	return NewPropertyUint32(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyUint32) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(uint32)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyUint32) WriteUint32(value uint32) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyUint32) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint32) ReadUint32() uint32 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint32) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyUint64 struct {
	Value       uint64        `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyUint64(description string, defaultValue uint64, min, max int, readOnly, userVisible bool, unit string) *PropertyUint64 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyUint64{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyUint64RW(description string, defaultValue uint64, min, max int, userVisible bool, unit string) *PropertyUint64 {
	return NewPropertyUint64(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyUint64RO(description string, defaultValue uint64, min, max int, userVisible bool, unit string) *PropertyUint64 {
	return NewPropertyUint64(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyUint64UserView(description string, defaultValue uint64, min, max int, unit string) *PropertyUint64 {
	return NewPropertyUint64(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyUint64UserViewRaw(description string, defaultValue uint64, min, max int) *PropertyUint64 {
	return NewPropertyUint64(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyUint64) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(uint64)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyUint64) WriteUint64(value uint64) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyUint64) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint64) ReadUint64() uint64 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyUint64) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyBool struct {
	Value       bool          `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyBool(description string, defaultValue bool, min, max int, readOnly, userVisible bool, unit string) *PropertyBool {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyBool{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyBoolRW(description string, defaultValue bool, min, max int, userVisible bool, unit string) *PropertyBool {
	return NewPropertyBool(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyBoolRO(description string, defaultValue bool, min, max int, userVisible bool, unit string) *PropertyBool {
	return NewPropertyBool(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyBoolUserView(description string, defaultValue bool, min, max int, unit string) *PropertyBool {
	return NewPropertyBool(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyBoolUserViewRaw(description string, defaultValue bool, min, max int) *PropertyBool {
	return NewPropertyBool(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyBool) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(bool)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyBool) WriteBool(value bool) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyBool) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyBool) ReadBool() bool {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyBool) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyFloat32 struct {
	Value       float32       `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyFloat32(description string, defaultValue float32, min, max int, readOnly, userVisible bool, unit string) *PropertyFloat32 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyFloat32{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyFloat32RW(description string, defaultValue float32, min, max int, userVisible bool, unit string) *PropertyFloat32 {
	return NewPropertyFloat32(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyFloat32RO(description string, defaultValue float32, min, max int, userVisible bool, unit string) *PropertyFloat32 {
	return NewPropertyFloat32(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyFloat32UserView(description string, defaultValue float32, min, max int, unit string) *PropertyFloat32 {
	return NewPropertyFloat32(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyFloat32UserViewRaw(description string, defaultValue float32, min, max int) *PropertyFloat32 {
	return NewPropertyFloat32(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyFloat32) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(float32)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyFloat32) WriteFloat32(value float32) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyFloat32) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyFloat32) ReadFloat32() float32 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyFloat32) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}

type PropertyFloat64 struct {
	Value       float64       `json:"value"`
	ReadOnly    bool          `json:"readOnly"`
	UserVisible bool          `json:"userVisible"`
	Description string        `json:"description"`
	Unit        string        `json:"unit"`
	Min         int           `json:"min"`
	Max         int           `json:"max"`
	mutex       *sync.RWMutex `json:"-"`
	id          xid.ID        `json:"-"`
}

func NewPropertyFloat64(description string, defaultValue float64, min, max int, readOnly, userVisible bool, unit string) *PropertyFloat64 {
	mutex := &sync.RWMutex{}
	id := xid.ID{}
	return &PropertyFloat64{defaultValue, readOnly, userVisible, description, unit, max, min, mutex, id}
}

func NewPropertyFloat64RW(description string, defaultValue float64, min, max int, userVisible bool, unit string) *PropertyFloat64 {
	return NewPropertyFloat64(description, defaultValue, min, max, false, userVisible, unit)
}

func NewPropertyFloat64RO(description string, defaultValue float64, min, max int, userVisible bool, unit string) *PropertyFloat64 {
	return NewPropertyFloat64(description, defaultValue, min, max, true, userVisible, unit)
}

func NewPropertyFloat64UserView(description string, defaultValue float64, min, max int, unit string) *PropertyFloat64 {
	return NewPropertyFloat64(description, defaultValue, min, max, true, true, unit)
}

func NewPropertyFloat64UserViewRaw(description string, defaultValue float64, min, max int) *PropertyFloat64 {
	return NewPropertyFloat64(description, defaultValue, min, max, true, true, UnitNone)
}

func (prop *PropertyFloat64) Write(value interface{}) error {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	typeOfValue := reflect.TypeOf(value)
	typeOfPortValue := reflect.TypeOf(prop.Value)

	if !typeOfValue.ConvertibleTo(typeOfPortValue) {
		return fmt.Errorf("incompatible value types, given type: %v, could not be converted to: %v", typeOfValue, typeOfPortValue)
	}
	valueOfValue := reflect.ValueOf(value)
	prop.Value = valueOfValue.Convert(typeOfPortValue).Interface().(float64)
	prop.id = xid.New()
	return nil
}

func (prop *PropertyFloat64) WriteFloat64(value float64) {
	prop.mutex.Lock()
	defer prop.mutex.Unlock()

	prop.Value = value
	prop.id = xid.New()
}

func (prop *PropertyFloat64) Read() interface{} {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyFloat64) ReadFloat64() float64 {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.Value
}

func (prop *PropertyFloat64) GetID() xid.ID {
	prop.mutex.RLock()
	defer prop.mutex.RUnlock()

	return prop.id
}
